---
title: "20231020_BGGN213_Class06"
author: "Savannah Bogus A69027475"
format: pdf
---

## All about functions in R

Every function in R has at least 3 things: name, arguments (inputs to functions), and the body. 

Today's function will be to grade a class of student assignment scores, such as homework. 

Initially, I will make a simplified vector input where I know what the answer will be. 

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```
# In class practice before questions
I defined a student1d vector below to make things easier for me to see so that I could edit easier and visually understand what is going on, but if I were to make it cleaner, I could just put in the mean of what is contained in student1d without defining student1d. For student 1 and student 2, I will not define this student1d vector.  
```{r}
mean(student1)
min(student1)
student1[-which.min(student1)]
#student1d means student1dropped
student1d<-student1[-which.min(student1)]
mean(student1d)
```
 I found the `which.min(x)` function both in google and the help pages, which I didn't understand before, but I'm getting it now after having seen you using it on the screens. Now, I know I can use the `-` sign to get rid of that min. However, if you look in the code chunk below the NAs are still causing problems. I googled a how to replace NA with 0's in a vector, and I found this function, but there's also a more intuitive (to me) replace function that I could use. 

```{r}
student2[is.na(student2)]<-0
student2
```
I did manage to replace NA with 0. Jiachen also just told me this function is in our pdf for today, so I googled it for no reason when you provided the right information. Bummer for the amount of work I'm putting in.  Now, can I take the mean of that? 
```{r}
mean(student2[-which.min(student2)])
```
Looks like it worked! Now, there's problems with student 3 who has multiple NA's, and that I'm really struggling with, honestly. I need to drop only one 0, and I have a feeling the tactic I'm using above won't work. 

```{r}
student3[is.na(student3)]<-0
mean(student3[-which.min(student3)])
```
Oh, my bad. It really only does drop one min, not all of the mins. That's awesome! Now, I think I need to make a full function for it? But I'll be honest, I'm super lost about how to make a full working function. I'll start to try to do so below, and hopefully I get it right, though. 

```{r}
#Need to define x
x<-student1
#Make NA's 0. Barry used the word "Mask"
x[is.na(x)]<-0
#Finding the mean after dropping the lowest score without defining a new vector
mean(x[-which.min(x)])
```
Above, that should work for any student defined x. I probably need to know how to make x be any student so it can go through a list of students, which I'm not totally sure how to d, but I think I need to make x a data frame? 
```{r}
grade<-function(x){
  #Make NA's 0. Barry used the word "Mask"
  x[is.na(x)]<-0
  #Finding the mean after dropping the lowest score without defining a new   vector
  mean(x[-which.min(x)])
}
```

Okay, so that should be the grade function. Good. Great. But, I need to make x be that gradebook you put in the PDF. That's Q1.  

# Q1
Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]

```{r}
# Read grade input CSV into DataFrame
grades_df <- read.csv("https://tinyurl.com/gradeinput",
                        row.names=1)
```
I gotta figure out how to grade this. It's not working when I just try to grade. It keeps telling me I have an error in `which.min(x)`. 

'grade(grades_df)'

That didn't work in R (so I took it out of R code). Apparently, we have to use `apply()` somehow, but I'm not sure how, and the help page isn't super helpful, as you stated. I googled it, though, and found a UChic page that I'm going to try to use myself before you get to it in class. I like to work ahead and fail a lot :)
```{r}
apply(grades_df,1,grade)
scores<-apply(grades_df,1,grade)
```
Heck yeah, I did it before you got to it in class! Thanks, UChic page about apply! That was way more understandable. Now, I can get to more questions.

# Q2
Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? [3pts]

I have no real idea if I can apply a `max()` function to an `apply()` function, but I'm going to try. I'll leave my failure below if it fails.
```{r}
max(apply(grades_df,1,grade))
```
Okay, cool, so I know the top score, but not the actual student it was. I forgot but I know there's a way to find the name of it. Is it row.names? I'm gonna try that. Me from slightly in the future: it didn't work and neither did rownames. I bet it's `which.max()`
```{r}
rownames(max(apply(grades_df,1,grade)))
```
I'm trying `which.max()`
```{r}
which.max(apply(grades_df,1,grade))
```
So, student 18 is our top scoring pal, and I know from something I did before that they got a 94.5.

# Q3

Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]

Okay, so I think I need to not use the grade function where I drop a lowest score because I actually want to look at the lowest score this time. 
```{r}
which.min(apply(grades_df,2,mean,na.rm=TRUE))
```
I need to be careful about getting rid of the NA's, though. If no one did the HW because it was so hard, then that would be the hardest HW, so I need to look at the same thing but with NA's=0. So, I'll make a new df with NAs masked to 0. 
```{r}
grades_df2<-grades_df
grades_df2[is.na(grades_df2)]<-0
grades_df2
```
Now, let's find this min.
```{r}
which.min(apply(grades_df2,2,mean))
```
But, maybe it's not fair to put NA's as 0. Maybe I should do the sum instead.
```{r}
which.min(apply(grades_df2,2,sum))
```
Oh, but it's the same answer. Either HW2 or HW3 are the hardest HW's. I could also do a muddypoint survey like you do to figure it out from the horse's (student's) mouth.

# Q4

Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]

That'll be the correlation function. 
```{r}
cor(grades_df2$hw2,scores)
```
```{r}
cor(grades_df2$hw5,scores)
```
I'm trying to use `apply()` to get a correlation between each HW. Struggling, though, since `cor()` needs an x and a y.
apply(x, MARGIN, function)
```{r}
apply(grades_df2,2,cor,y=scores)
```
I had to argue to define y when using `cor()`. The HW with the highest correlation is HW5. 

